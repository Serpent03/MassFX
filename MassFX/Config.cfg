//MassFX is a shader pack compiled by luluco250, the name is a play on "Mass Effect"
//This is a work-in-progress, not all options may work or can have adverse effects on the final image, use with care

////--------//
///**Logo**///
//--------////
#define USE_LOGO 1 //[0:1] //-Displays the MassFX logo for a short while when initialized
//>Logo Settings<\\ 
#define LOGO_BoundBorder 2 //[0:4] //-Which border to bind the logo to (where the offset starts from): 0=center of screen, 1=top left, 2=bottom left, 3=bottom right, 4=top right
#define LOGO_OffsetX 0 //[0:infinity] //-X offset of the logo
#define LOGO_OffsetY 0 //[0:infinity] //-Y offset of the logo
#define LOGO_ResX 512 //[1:infinity] //-Width of the logo texture
#define LOGO_ResY 128 //[1:infinity] //-Height of the logo texture
#define LOGO_Fade 0.9 //[0.0:1.0] //-At which point of timeout to being fade out, 0.5 would be half the timeout time
#define LOGO_Time 4000 //[0:100000] //-Time in milliseconds in which the logo will be visible in the screen, if 0 then logo will always be displayed
#define LOGO_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-Toggle key for Logo

////--------------//
///**View Depth**///
//--------------////
#define USE_VD 1 //[0:1] //-Allows the display of the depth buffer when the toggle key is pressed

#define VD_ToggleKey VK_F12 //[undef] //-Toggle key for view depth

////----------------------//
///**Color Lookup Table**///
//----------------------////
#define USE_LUT 1 //[0:1] //-Color lookup table, a fast way to apply color grading via a LUT texture

#define LUT_ResX 256 //[1:infinity] //-Width of the LUT texture
#define LUT_ResY 16 //[1:infinity] //-Height of the LUT texture
#define LUT_QuadScale 16 //[1:infinity] //-Pixel width/height of each quad
#define LUT_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-Toggle key for LUT
/*Tip: MassFX comes with a neutral LUT.png, to use this effect follow these steps:
	1-Take a screenshot with your game with the effect enabled
	2-Open it in your favorite image manipulation program (preferably GIMP or Photoshop)
	3-Paste the LUT texture (MassFX\Textures\LUT.png)
	4-Place it somewhere such as the bottom left of the image, on the same layer as the screenshot
	5-Do all your color grading in the program
	6-Once finished crop the layer to only the LUT texture
	7-Save over the LUT texture (MassFX\Textures\LUT.png)
	8-Colors will now be graded as you did in your program, defined by the LUT texture
	9-In case you dislike it, a neutral backup texture is included (MassFX\Textures\LUTneutral.png)
*/

////-------//
///**HDR**///
//-------////

//>HDR Settings<\\ 
#define HDR_Threshold 0.95 //[0.1:2.0] //-Threshold for what pixels are considered very bright
#define HDR_Saturation 1.0 //[0.0:1.0] //-Saturation of very bright pixels
#define HDR_Exposure 0.1 //[0.0:1.0] //-Target value for auto exposure
#define HDR_ExposureResolution 32 //[1:1024] //-Resolution used by the exposure texture

////---------------------------//
///**Mouse-Based Motion Blur**///
//---------------------------////
#define USE_MBMB 1 //[MBMB] //-Motion blur, based on mouse velocity

//Tip: Use low velocity values to avoid motion blur when the mouse is moving slow, as in menus, that way motion blur works similar to how it was seen in half life 2, only when the camera shakes really fast

//>Mouse-Based Motion Blur Settings<\\ 
#define MBMB_Samples 6 //[0:infinity] //-Number of blur samples, tweak the velocity value if using a high number of samples otherwise you'll get too much blur
#define MBMB_Velocity 0.25 //[0.01:1.0] //-Multiplies the amount of velocity, useful to reduce blur when using a high number of samples, this can also help counter the side effect of blur in menus due to slower mouse movement
#define MBMB_UseDepth 1 //[0:1] //-Whether or not to take depth in account to motion blur, this allows for more motion blur on far pixels than near ones
#define MBMB_DepthWeight 1.0 //[0.0:1.0] //-Weights how depth should affect motion blur
#define MBMB_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-Toggle key for MBMB


////--------------------------//
///**Physically-Based Bloom**///
//--------------------------////
#define USE_PBB 1 //[PBBloom] //Bloom, physically-based

//Tip: more samples allow for a much smoother bloom even at low resolution scales, threshold may depend on game and whether or not there's brightness adaptation

//>Bloom Settings<\\ 
#define PBB_Power 0.5 //[0.0:1.0] //-Amount of bloom applied to the screen
#define PBB_UseExposure 0 //[0:1] //-Whether to use the auto exposure algorithm or not (WORK IN PROGRESS)
#define PBB_Samples 2 //[1:12] //-Amount of blur samples, decreases aliasing/"blockyness" of bloom although recommended to decrease the resolution scale for performance
#define PBB_ResolutionScale 1.0 //[0.1:1.0] //-Affects the general resolution in which the effect is rendered
#define PBB_Passes 8 //[1:8] //-How many passes of bloom there'll be, low values will provide only detail bloom, higher values will provide large bloom as well

//>Dirt Settings<\\ 
#define PBB_DirtPower 1.0 //[0.0:1.0] //-Amount of dirt applied to the bloom
#define PBB_DirtDefinition 0.5 //[0.0:1.0] //-Definition of dirt, at 1.0 the bloom shape will depend entirely on the dirt texture and dirt power
#define PBB_DirtResX 1280 //[1:infinity] //-Width of the dirt texture
#define PBB_DirtResY 720 //[1:infinity] //-Height of the dirt texture
#define PBB_Tint float3(1.0, 1.0, 1.0) //[0.0:1.0] //-Tint multiplied to the bloom, leave all three at 1.0 for no tint

//>Misc Settings<\\ 
#define PBB_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-Toggle key for Bloom
#define PBB_DebugMode 0 //[0:1] //-0=Nothing different, 1=Bloom only, 2=HDR texture only, 3=Exposure texture only

////------------//
///**Vignette**///
//------------////
#define USE_VIGNETTE 1 //[Vignette] //Vignette, darkens edges of screen

//>Vignette Settings<\\ 
#define Vignette_Power 0.5 //[0.0:1.0] //-Amount of vignette applied to the screen
#define Vignette_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-Toggle key for vignette

////---------//
///**Grain**///
//---------////
#define USE_GRAIN 1 //[0:1] //-Grain, simple effect that generates pseudo-random grain scattered over the image
#define GRAIN_Power 0.5 //[0.0:1.0] //-How much grain will be applied to the image
#define GRAIN_BrightnessFactor 2.0 //[0.0:10.0] //-Amount of brightness taken into account for weighting the grain
#define GRAIN_ToggleKey RESHADE_TOGGLE_KEY //[undef] //-Toggle key for grain
